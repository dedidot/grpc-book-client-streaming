// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: book.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	AddBook(ctx context.Context, opts ...grpc.CallOption) (BookService_AddBookClient, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) AddBook(ctx context.Context, opts ...grpc.CallOption) (BookService_AddBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookService_ServiceDesc.Streams[0], "/book.BookService/AddBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceAddBookClient{stream}
	return x, nil
}

type BookService_AddBookClient interface {
	Send(*GetBookRequest) error
	CloseAndRecv() (*GetBookResponse, error)
	grpc.ClientStream
}

type bookServiceAddBookClient struct {
	grpc.ClientStream
}

func (x *bookServiceAddBookClient) Send(m *GetBookRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bookServiceAddBookClient) CloseAndRecv() (*GetBookResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations must embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	AddBook(BookService_AddBookServer) error
	mustEmbedUnimplementedBookServiceServer()
}

// UnimplementedBookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) AddBook(BookService_AddBookServer) error {
	return status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookServiceServer) mustEmbedUnimplementedBookServiceServer() {}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_AddBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BookServiceServer).AddBook(&bookServiceAddBookServer{stream})
}

type BookService_AddBookServer interface {
	SendAndClose(*GetBookResponse) error
	Recv() (*GetBookRequest, error)
	grpc.ServerStream
}

type bookServiceAddBookServer struct {
	grpc.ServerStream
}

func (x *bookServiceAddBookServer) SendAndClose(m *GetBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bookServiceAddBookServer) Recv() (*GetBookRequest, error) {
	m := new(GetBookRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddBook",
			Handler:       _BookService_AddBook_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "book.proto",
}
